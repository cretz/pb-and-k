buildscript {
    ext.kotlin_version = '1.2.71'
    repositories {
        mavenCentral()
	jcenter()
        maven {
            url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.kotlin:kotlin-native-gradle-plugin:0.7'
        classpath 'uk.co.jamesridgway:gradle-gitflow-plugin:1.5.5'
    }
}

allprojects {
    group 'com.github.cretz.pbandk'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    apply plugin: 'maven-publish'
    apply plugin: 'uk.co.jamesridgway.gradle.gitflow.plugin'

    if (project.version.toString().endsWith('-SNAPSHOT')) {
        project.tasks.publish.enabled = false
    }

    publishing {
        repositories {
            maven {
                url = "https://artifactory.eng.toasttab.com/artifactory/libs-${version.toString().endsWith('-SNAPSHOT') ? 'snapshot' : 'release'}-local"
                credentials {
                    username = project.properties.getOrDefault("artifactory_user", "")
                    password = project.properties.getOrDefault("artifactory_password", "")
                }
            }
        }
    }
}

task printVersion {
    doLast {
        println project.version
    }
}

import java.nio.file.Paths
allprojects {
    ext.runProtoGen = { inPath, outPath, kotlinPackage = null, logLevel = null, inSubPath = null ->
        // Build CLI args
        def args = ['protoc']
        args << '--kotlin_out='
        if (kotlinPackage != null) args[-1] += "kotlin_package=$kotlinPackage,"
        if (logLevel != null) args[-1] += "log=$logLevel,"
        args[-1] += 'empty_arg:' + Paths.get(outPath)
        args << '--plugin=protoc-gen-kotlin=' +
            Paths.get(project.rootDir.toString(), 'protoc-gen-kotlin/protoc-gen-kotlin-jvm/build/install/protoc-gen-kotlin/bin/protoc-gen-kotlin')
        if (System.properties['os.name'].toLowerCase().contains('windows')) args[-1] += '.bat'
        def includePath = Paths.get(inPath)
        if (!includePath.absolute) includePath = Paths.get(project.projectDir.toString(), inPath)
        args << '-I' << includePath
        def filePath = includePath
        if (inSubPath != null) filePath = includePath.resolve(inSubPath)
        args += filePath.toFile().listFiles().findAll {
            it.isFile() && it.toString().endsWith('.proto')
        }
        // Run it
        exec { commandLine(*args) }
    }
}
